import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '8158783896:AAHJgdIfvl1GT9JnM7Wbwa2wOQKQUc2ad1o'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
drugs_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–≠–ø—Ç–∏—Ñ–∏–±–∞—Ç–∏–¥"), KeyboardButton(text="–ê–≥–≥—Ä–∞—Å—Ç–∞—Ç")],
    ],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    drug_choice = State()
    weight = State()
    renal_function = State()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é (–¥–ª—è aiogram 2.x)
async def set_bot_commands():
    commands = [
        types.BotCommand(command="/start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/calculate", description="–†–∞—Å—á–µ—Ç –¥–æ–∑—ã"),
        types.BotCommand(command="/protocol", description="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")
    ]
    await bot.set_my_commands(commands)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∏ /help
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
        "üè• –ë–æ—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–∑ –∞–Ω—Ç–∏—Ç—Ä–æ–º–±–æ—Ü–∏—Ç–∞—Ä–Ω—ã—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/calculate - –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç\n"
        "/protocol - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "‚ö†Ô∏è –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–∞—á–∞!",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /protocol
@dp.message_handler(commands=['protocol'])
async def show_protocol(message: types.Message):
    protocol_text = (
        "üìö –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        "üíä –≠–ø—Ç–∏—Ñ–∏–±–∞—Ç–∏–¥ (–ò–Ω—Ç–µ–≥—Ä–∏–ª–∏–Ω):\n"
        "‚ñ´Ô∏è –ë–æ–ª—é—Å: 180 –º–∫–≥/–∫–≥ (–º–∞–∫—Å 22.6 –º–≥)\n"
        "‚ñ´Ô∏è –ò–Ω—Ñ—É–∑–∏—è: 2 –º–∫–≥/–∫–≥/–º–∏–Ω (1 –º–∫–≥/–∫–≥/–º–∏–Ω –ø—Ä–∏ Cl <50)\n\n"
        "üíä –ê–≥–≥—Ä–∞—Å—Ç–∞—Ç (–¢–∏—Ä–æ—Ñ–∏–±–∞–Ω):\n"
        "‚ñ´Ô∏è –ë–æ–ª—é—Å: 25 –º–∫–≥/–∫–≥\n"
        "‚ñ´Ô∏è –ò–Ω—Ñ—É–∑–∏—è: 0.15 –º–∫–≥/–∫–≥/–º–∏–Ω (–ø—Ä–∏ Cl <30 - 0.075 –º–∫–≥/–∫–≥/–º–∏–Ω)\n\n"
        "‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –¥–æ–∑—ã:\n"
        "- –≠–ø—Ç–∏—Ñ–∏–±–∞—Ç–∏–¥: –∏–Ω—Ñ—É–∑–∏—è 15 –º–≥/—á–∞—Å\n"
        "- –ê–≥–≥—Ä–∞—Å—Ç–∞—Ç: –∏–Ω—Ñ—É–∑–∏—è 40 –º–≥/—á–∞—Å"
    )
    await message.reply(protocol_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /calculate
@dp.message_handler(commands=['calculate'])
async def calculate_start(message: types.Message):
    await Form.drug_choice.set()
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç:", reply_markup=drugs_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
@dp.message_handler(state=Form.drug_choice)
async def process_drug_choice(message: types.Message, state: FSMContext):
    if message.text not in ["–≠–ø—Ç–∏—Ñ–∏–±–∞—Ç–∏–¥", "–ê–≥–≥—Ä–∞—Å—Ç–∞—Ç"]:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ")
        return
    
    async with state.proxy() as data:
        data['drug'] = message.text
    
    await Form.weight.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–∫–≥):", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Å–∞
@dp.message_handler(state=Form.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        if weight <= 0:
            raise ValueError
            
        async with state.proxy() as data:
            data['weight'] = weight
            
        await Form.renal_function.set()
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞ (–º–ª/–º–∏–Ω):")
        
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 75)")
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏—Ä–µ–Ω—Å–∞
@dp.message_handler(state=Form.renal_function)
async def process_renal(message: types.Message, state: FSMContext):
    try:
        cl = float(message.text.replace(',', '.'))
        if cl <= 0:
            raise ValueError
            
        async with state.proxy() as data:
            drug = data['drug']
            weight = data['weight']
            
        if drug == "–≠–ø—Ç–∏—Ñ–∏–±–∞—Ç–∏–¥":
            # –†–∞—Å—á–µ—Ç –¥–ª—è –≠–ø—Ç–∏—Ñ–∏–±–∞—Ç–∏–¥–∞
            bolus = min(weight * 180 / 1000, 22.6)
            infusion_rate = 1 if cl < 50 else 2
            infusion = min(weight * infusion_rate * 60 / 1000, 15)
            note = " (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–∏ –ø–æ—á–µ—á–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏)" if cl < 50 else ""
            
        elif drug == "–ê–≥–≥—Ä–∞—Å—Ç–∞—Ç":
            # –†–∞—Å—á–µ—Ç –¥–ª—è –ê–≥–≥—Ä–∞—Å—Ç–∞—Ç–∞
            bolus = weight * 25 / 1000
            infusion_rate = 0.075 if cl < 30 else 0.15
            infusion = weight * infusion_rate * 60
            note = " (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–∏ –ø–æ—á–µ—á–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏)" if cl < 30 else ""
        
        response = (
            f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {drug}:\n"
            f"‚ñ™Ô∏è –í–µ—Å: {weight} –∫–≥\n"
            f"‚ñ™Ô∏è –ö–ª–∏—Ä–µ–Ω—Å –∫—Ä–µ–∞—Ç–∏–Ω–∏–Ω–∞: {cl} –º–ª/–º–∏–Ω\n\n"
            f"üíâ –ë–æ–ª—é—Å–Ω–∞—è –¥–æ–∑–∞: {bolus:.2f} –º–≥\n"
            f"üîÑ –ò–Ω—Ñ—É–∑–∏—è: {infusion:.2f} –º–≥/—á–∞—Å{note}\n\n"
            "‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–∞—á–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º!"
        )
        
        await message.reply(response)
        await state.finish()
        
    except ValueError:
        await message.reply("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65)")
        return

if __name__ == '__main__':
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=set_bot_commands)
